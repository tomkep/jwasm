
  Issues in the source which should be fixed.

  1. SYM_PROC Handling

  Current status is: a symbol with state SYM_PROC is either a PROC or
  a PROTO item. This isn't a good design.

  status to achieve:

   PROTO is to be split in a SYM_EXTERNAL + SYM_TYPE.
   Thus PROTO is virtually handled like EXTERNDEF, which is
   the correct thing to do.

   PROC is to be split in a SYM_INTERNAL + SYM_TYPE.
   mem_type will be MT_NEAR, MT_FAR or MT_PROC.
   An additional struct will be needed which is
   stored in one of the "unused" space ( total_length?)
   and which holds the data specific for PROCs ( USES
   reglist, LOCALs, ...).

   so field <type> in asm_sym is set
   - if mem_type is MT_TYPE
   - if mem_type is MT_NEAR, MT_FAR or MT_PROC AND
     symbol is a PROC.

   The new SYM_TYPE typekind will be TYPEKIND_PROTO. It
   stores the parameter list and a few other attributes.

  2. Backpatching

  Currently backpatching handles JMPs and CALLs only. It
  is unable to handle PUSHs ( and may be others as well).
  So the backpatch routine calculates addresses wrong and
  as a result an additional assembly pass is required.

  3. Two Pass Minimum

  Currently the generated code/data bytes aren't stored in
  assembly pass one. So a second pass is always needed. 
  With better backpatching capabilities, JWasm should be
  able to virtually become a one-pass assembler.

  4. Token Buffer
  
  The token buffer is a global variable. This causes
  a lot of problems. There are some workarounds implemented
  to make the buffer reusable, but these hacks didn't
  help to make the code more readable.

